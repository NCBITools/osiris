#!/bin/sh
#
# instructions for building OSIRIS
#  -- problems, contact us at forensics@ncbi.nlm.nih.gov
#
# these instruction may not work on older versions of OSIRIS
# because they were built with older versions of compilers, libraries, etc.
#
#
# wxWidgets 3.0.5 is required
# For more information, see http://www.wxwidgets.org
#
# This shell script is for building the macintosh version
# of osiris.
#
###########################################################################
#
#  MS-Windows build
#
# To build on MS-Windows, with VC++ 2017
#  wxWidgets 3.0.5, libxml2 2.9.8, libxslt 1.1.33, and libiconv 1.15 are also required.
#  wxWidgets can be downloaded at http://www.wxwidgets.org/ 
#
#  Source code obtained for libxml2 and libxslt from http://xmlsoft.org/
#  Source code for libiconv obtained at http://www.gnu.org/software/libiconv/
#
#  libxml2, libxslt, and libiconv should be built in the same parent directory and the
#  environment variable EXTLIB should be set to the parent directory such that the libraries
#  can be found in the following directories
#
#  $(EXTLIB)\libiconv-win-build-1.15\build-VS2017\Release
#  $(EXTLIB)\libxml2-2.9.8\win32\bin.msvc
#  $(EXTLIB)\libxslt-1.1.33\win32\bin.msvc
#
#  and the C header files can be found in
#
#  $(EXTLIB)\libiconv-win-build-1.15\include
#  $(EXTLIB)\libxml2-2.9.8\include
#  $(EXTLIB)\libxslt-1.1.33
#
#  The VC++ project files use EXTLIB to find these libraries
#
# wxWidgets:
#
#  OSIRIS uses wxWidgets v 3.0.5
#  Download wxWidgets at http://wxwidgets.org/downloads/ and select either 
#  the ZIP or 7z download.
#  Create a new folder, (for example wxWidgets-3.0.5) and unpack the 
#  contents of the zip file there.
#  Set the environment variable WXHOME to the full path of this folder.  
#  This is done in Control Panel, search for "environment"
#  Go to the wxWidgets "build" folder, then "msw"
#  Select the appropriate solution (.sln) file for your version of Visual 
#  C++. (In visual C++, see Help -> About Microsoft Visual Studio)  It 
#  should be 10 or later to build OSIRIS.
#  Build in Visual C++ for "Release" and "Win32" and optionally for "Debug" 
#  and "Win32"  Both can coexist in the same directory structure.
#
#  for debugging, the file, include\wx\msw\msvcrt.h,
#  was edited and "#define _CRTDBG_MAP_ALLOC" was added above "#include <stdlib>"
#  as per instructions at https://msdn.microsoft.com/en-us/library/x98tx3cf.aspx
#
# Build OSIRIS:
#
#  OSIRIS is built with Microsoft Visual C++ from Microsoft Visual Studio 
#  2017 with the msi installer added.  To install the msi installer, see
#  https://marketplace.visualstudio.com/items?itemName=visualstudioclient.MicrosoftVisualStudio2017InstallerProjects
#  It is important that the Visual C++ environment is started AFTER setting 
#  WXHOME and EXTLIB in the environment.
#  Download the source code at https://github.com/ncbi/osiris 
#  Select the version from the "Branch" pulldown on the left.
#  side of the web page and select "Download ZIP" from the right side.  
#  Unpack the zip file and go to the "osiris" folder.
#  Open the solution file, osirisAll.sln with Visual C++ 2010 (or later)
#  Select "Release" and "Win32" in the toolbar or from the menu
#  bar: Build -> Configuration Manager.
#  Build the solution.  From the menu bar: Build -> Rebuild Solution
#  Optional - If you built wxWidgets for "Debug" you can also build OSIRIS 
#  for "Debug"  however it recommended that you copy the directory 
#  structure of an OSIRIS installation to OsirisAnalysis/Debug except for 
#  OsirisAnalysis.exe
#  
#  An alternative to creating an .msi file is
#  to run a perl script, .\ZipPerl\MakeZip.pl
#  which will set up the directory structure in .\ZipPerl\Osiris
#  and then create a zip file.
#
#  This perl script requires MinGW (bash), perl, and 7zip
#
#
# After the above are installed, the commands, 7z and cp must be
# available from PATH environment variable
#
# If you want to create the directory structure w/o 
# a zip file, then comment out the line of code in MakeZip.pl
# containing '7z' by preceeding it with a pound sign (#) like
# the first several lines of this file
#
# The directory structure will be in .\ZipPerl\Osiris and can be moved
#
#
###########################################################################
#
#
#  macintosh - UNIX command line
#
#
# Make sure you have the developer tools for Macintosh installed.
# From the command line run the following:
#
#  gcc --version
#
# If gcc is not installed, you will receive a message indicating that, 
# otherwise it will display version information.
#
# Build wxWidgets 3.0.5 - Go to http://www.wxwidgets.org/downloads/
# Unpack the download to a new directory, for example
# from the directory containing the download, run the following:
#   tar xvf wxWidgets-3.0.5.tar.bz2
# This will unpack the source code into a directory named 
#   wxWidgets-3.0.5
# change to that directory and create a new directory, build-cocoa
#
#  cd wxWidgets-3.0.5
#  mkdir build-cocoa
#
# there is a shell script file in this osiris distribution, in 
# the folder buildwx-osx, named config.sh
# copy that file to wxWidgets-3.0.5/build-cocoa
#
# if the osiris directory and wxWidgets have the same parent directory, the
# following commands should work from the wxWidgets directory
#
#  cp ../../osiris/buildwx-osx/config.sh ./build-cocoa/config.sh
# 
# change directory to wxWidgets-3.0.5/build-cocoa and run the script
#   cd wxWidgets-3.0.5/build-cocoa
#   sh config.sh
#
# when finished, the output will be in a file, build_log.txt
# make sure there are no error messages at the end of the file
#
# install wxWidgets.  The default installation location from the
# build script is  ~/local/wxRelease where ~ represents the
# user's home directory
#
# run the following command:
#   make install
#
# then make sure that ~/local/wxRelease has four subdirectories
#   bin, include, lib, and share
#
# If wxWidgets will be used from a location other than ~/local/wxRelease
# set the environment variable WXHOME to that location before building
# OSIRIS.
#
#
# Build OSIRIS
#
# this file, README, also searves as a shell script to build OSIRIS
# on the Macintosh
# From the command line run:
#
#  change directory to the osiris source directory and run:
#
#  sh README
#
# if there are no errors, then run:
#
#  make
#
# there will be a lot of warnings, but if there are no errors
# run the following script to install Osiris in ~/Applications
# and create a distribution file, Osiris-Mac-2.x.tar.gz in
# the this folder
#
#   sh cpmac
#
# If there are no errors, you are done. Using the
# Macintosh user interface, open your "Home" folder
# in Finder, then Applications - Osiris-Installer, and run Osiris-*.app
#
#
cd `dirname $0`
if test -r "build-osiris-mac-osx.sh"; then
  sh build-osiris-mac-osx.sh
fi
